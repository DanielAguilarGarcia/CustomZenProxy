<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2019.1.1 (Build 612U)" ts="2022-10-10 22:15:57">
<Class name="%ZENproxy.Object">
<Copyright>/* Copyright (c) 2019 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */</Copyright>
<Description><![CDATA[
The Zen Proxy class provides a way to assemble data that can be
conveniently passed between the web client and the server.
It works in conjunction with the <b>zenProxy</b> JavaScript class
defined in <i>zenutils.js</i>. The <b>zenProxy</b> class is
the client-side representation of the server-side <class>%ZENproxy.Object</class>
class and vice versa.<br/>
The <class>%ZENproxy.Object</class> class is useful for cases where
you do not know what run-time properties will exist when you are designing
your application (perhaps it is user-configurable).<br/>
The proxy class can be used in several ways. You can use it to send
an arbitrary set of data values from the client to a server-side method.
To do this, create an instance of <b>zenProxy</b> in a client-side JavaScript method:
<example language="javascript">
	// create instance of zenProxy
	var obj = new zenProxy();
	obj.name = 'Smith';
	obj.code = 'CRM114';
</example>
The <b>zenProxy</b> object is basically a generic JavaScript object with
a few pre-defined behaviors. You can dynamically add properties to it
simply by setting them.
These properties should have <em>literal</em> values, that is, they
should not refer to other JavaScript objects.<br/>
If you define a server-side ZenMethod whose signature includes an
argument of type <class>%ZENproxy.Object</class>, then you can invoke
this method from the client passing it an instance of a <b>zenProxy</b>
object. Zen will automatically marshal the values in the <b>zenProxy</b>
object into an instance of the <class>%ZENproxy.Object</class> object.<br/>
For example, suppose you have defined a server method:
<example language="cls!member">
ClassMethod MyMethod(pProxy as %ZENproxy.Object) As %Boolean [ZenMethod]
{
	Set tName = pProxy.name
	Set tCode = pProxy.code
	Quit 1
}
</example>
The client can invoke this method as it would any other Zen method, passing
an instance of <b>zenProxy</b> as the <var>pProxy</var> argument:
<example language="javascript">
	var obj = new zenProxy();
	obj.name = 'Smith';
	obj.code = 'CRM114';
	var ok = this.MyMethod(obj);
</example>
The <method>MyMethod</method> method will see the values 'Smith' and 'CRM114' for the properties
<property>name</property> and <property>code</property>, respectively.<br/>
You can also use the <class>%ZENproxy.Object</class> class to pass values
from a server method back to the client. To do this, create a server method
whose return type is <class>%ZENproxy.Object</class>:
<example language="cls!member">
ClassMethod GetServerInfo() As %ZENproxy.Object [ZenMethod]
{
	Set tProxy = ##class(%ZENproxy.Object).%New()
	Set tProxy.whatever = "Some server value"
	Quit tProxy
}
</example>
The client can invoke this method and use its return value as an object:
<example language="javascript">
	var obj = this.GetServerInfo();
	alert(obj.whatever);
</example>
The <class>%ZENproxy.Object</class> does not actually define any
properties. Instead it maintains an internal array of property names
along with their corresponding values and uses dynamic dispatch
to handle references to specific properties. This means that there
is no name checking for properties of <class>%ZENproxy.Object</class> 
(the same behavior as JavaScript objects). You can remove the current set of
properties within a <class>%ZENproxy.Object</class> object using
the <method>%Clear</method> method. You can find out what the
current set of properties is (as a local array) or supply a new set
using the <method>%CopyToArray</method> and <method>%CopyFromArray</method> methods.<br/>
The client-side <b>zenProxy</b> class defines only one public method,
<method>clear</method>, which deletes the current set of properties
from the object. In all other ways, you can treat is an instance
of JavaScript <b>Object</b>.<br/>
You can get the set of values within a <class>%ZEN.Auxiliary.dataController</class>
objects using its <method>getDataAsObject</method> method.<br/>
When using the <class>%ZENproxy.Object</class> class keep the following
things in mind:
<ul>
<li>All properties must have literal values (numbers or strings).</li>
<li>You have to use property names that are valid in both the client
and server environments. This means that names have to agree in case. It
also means that you cannot have two properties with the same name
but different case.</li>
</ul>
Note that <class>%ZENproxy.Object</class> DOES support
various property names that are valid in Javascript but were not traditionally
valid Objectscript property names. In general, these property names include symbols like
"$" and "_" that are relatively common in Javascript. To reference such a property in a
<class>%ZENproxy.Object</class> instance, simply delimit the property name using quotes:
<example>
Set myProperty = tProxy."my_property"
Set tProxy."$$foo" = "bar"
</example>]]></Description>
<Final>1</Final>
<IncludeCode>%ZENproxy.Utils</IncludeCode>
<Super>%RegisteredObject</Super>
<System>3</System>
<TimeChanged>66392,80013.58171</TimeChanged>
<TimeCreated>59220,66155.303</TimeCreated>

<Property name="%changed">
<Description>
 Internal property used to track if this object is modified.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<Internal>1</Internal>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="%index">
<Description>
 Internal property used to client index of this object.</Description>
<Type>%ZEN.Datatype.integer</Type>
<Internal>1</Internal>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="%data">
<Description>
 Internal array of data values within the proxy, indexed by series and property name.</Description>
<Type>%ZEN.Datatype.string</Type>
<Internal>1</Internal>
<MultiDimensional>1</MultiDimensional>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="forceStringFormat">
<Description>
 List of attribute names to force converstion to String.</Description>
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="excludeStringformat">
<Description>
 List of attribute names to ignore force converstion to String.</Description>
<Type>%ListOfDataTypes</Type>
</Property>

<Method name="%DispatchGetProperty">
<Description><![CDATA[
 Property dispatch method to catch references to 
 virtual properties.<br>
 This should not be called directly.<br>]]></Description>
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>pProperty:%String</FormalSpec>
<Implementation><![CDATA[	Quit $G(..%data(pProperty))
]]></Implementation>
</Method>

<Method name="%DispatchSetProperty">
<Description><![CDATA[
 Property dispatch method to catch references to 
 virtual properties.<br>
 This should not be called directly.<br>]]></Description>
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>pProperty:%String,pValue:%String</FormalSpec>
<Implementation><![CDATA[
	If ('$D(..%data(pProperty)) || (..%data(pProperty)'=pValue)) {
		Set ..%changed = 1
		Set ..%data(pProperty) = pValue
	}
]]></Implementation>
</Method>

<Method name="%Clear">
<Description>
 Delete all properties and data currently in the proxy object.</Description>
<Final>1</Final>
<Implementation><![CDATA[	Kill ..%data
]]></Implementation>
</Method>

<Method name="%CopyToArray">
<Description>
 Copy the properties in this proxyObject into
 a local array subscripted by property name.</Description>
<Final>1</Final>
<FormalSpec>*pArray</FormalSpec>
<Implementation><![CDATA[
	Kill pArray
	Merge pArray = ..%data
]]></Implementation>
</Method>

<Method name="%CopyFromArray">
<Description>
 Copy the values from a local array 
 (subscripted by property name) into
 this proxyObject.</Description>
<Final>1</Final>
<FormalSpec><![CDATA[&pArray]]></FormalSpec>
<Implementation><![CDATA[
	Kill ..%data
	Merge ..%data = pArray
]]></Implementation>
</Method>

<Method name="%ZENDeserialize">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec><![CDATA[pState:%String,&pObjSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"

	// CRC is class name in this case
	If ("%ZENproxy.Object"'=$P(pState,$C(1),1)) { Quit $$$ERROR($$$GeneralError,"Server version of object does not match version sent from the client."_..%ClassName(1)) } 

	Set ..%index = $P(pState,$C(1),2)
	Kill ..%data
	Set tLen = $L(pState,$C(1))
	For n = 3:1:tLen {
		Set x = $P(pState,$C(1),n)
		Set tProp = $P(x,$C(5),1)
		Set tValue = $P(x,$C(5),2)
		Set:tProp'="" ..%data(tProp) = tValue
	}
Done
	Quit tSC
Trap
	Set $ZT=""
	Set tSC = $$$ERROR($$$ObjectScriptError,"%OnZENDeserialize: " _ $ZE)
	Goto Done
]]></Implementation>
</Method>

<Method name="%ObjectSynch">
<Description>
 Synchronize this object with its client version.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "o.clear();",!
	Set tProp = $O(..%data(""))
	While (tProp '= "") {
		Write "o['",$zcvt(tProp,"O","JS"),"']='",$ZCVT($G(..%data(tProp)),"O","JS"),"';",!
		Set tProp = $O(..%data(tProp))
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%Serialize">
<Description>
 Serialize this object so that it can be shipped to the client.</Description>
<Final>1</Final>
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tState = ""
	Set tProp = $O(..%data(""))
	While (tProp '= "") {
		Set tState = tState _ $S(tState="":"",1:$C(1)) _ tProp_$C(5)_$G(..%data(tProp))
		Set tProp = $O(..%data(tProp))
	}
	Quit "%ZENproxy.Object"_$C(1,1)_tState
]]></Implementation>
</Method>

<Method name="%Create">
<Description>
 Given a string from the client,
 see if it contains a packed representation of a proxyObject.
 If it does, unpack and return a new object, otherwise
 return "".</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pState:%String</FormalSpec>
<ReturnType>%ZENproxy.Object</ReturnType>
<Implementation><![CDATA[
	Set tObj = ""
	If ($IsObject(pState) && pState.%IsA("%ZENproxy.Object")) {
		#; if we are passed an object, return it.
		Quit pState
	}

	If ($P(pState,$C(6),1)="%ZENproxy.Object") {
		Set tObj = ..%New()
		Set tLen = $L(pState,$C(6))
		For n = 3:1:tLen {
			Set x = $P(pState,$C(6),n)
			Set tProp = $P(x,$C(5),1)
			Set tValue = $P(x,$C(5),2)
			Set:tProp'="" tObj.%data(tProp) = tValue
		}
	}
	Quit tObj
]]></Implementation>
</Method>

<Method name="hasJSONContent">
<Description>
Drill down just enough to find out if the object has any content displayable as JSON given the current pFormat options</Description>
<Internal>1</Internal>
<FormalSpec>pFormat:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tHas=0, tProp="" For { Set tProp=$O(..%data(tProp),1,tValue)  Quit:""=tProp
		If $IsObject(tValue) {
			If tValue.%IsA("%ZENproxy.Object") {
				If pFormat["o" || tValue.hasJSONContent(pFormat) {
					Set tHas=1  Quit
				}
			} ElseIf pFormat["o" || ##class(%ZEN.Auxiliary.jsonProvider).hasObjContent(tValue,.tVisited,pFormat) {
				Set tHas=1  Quit
			}
		} Else {
			If ""'=tValue Set tHas=1  Quit
		}
	}
	Quit tHas
]]></Implementation>
</Method>

<Method name="%ToJSON">
<Description><![CDATA[
Write out the contents of this proxy object to the current device in JSON format.<br/>
This method is called when a proxy object is used in conjunction with
the <class>%ZEN.Auxiliary.jsonProvider</class> component.<br/>
<var>pFormat</var> is a flags string to control output formatting options.<br/>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
a - output null arrays/objects<br/>
b - line break before opening { of objects<br/>
c - output the ObjectScript-specific "_class" and "_id" properties (if a child property is an instance of a concrete object class)<br/>
e - output empty object properties<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
l - output empty lists<br/>
n - newline (lf)<br/>
o - output empty arrays/objects<br/>
q - output numeric values unquoted even when they come from a non-numeric property<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>]]></Description>
<Internal>1</Internal>
<FormalSpec>pLevel:%Integer=0,pFormat:%String="aelotw"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tLF=$S(pFormat["w":$C(13,10), pFormat["n":$C(10), 1:"")
		If pFormat'=$TR(pFormat,"it123456789") { Set tN=+$ZStrip(pFormat,"<E'N"), $P(tTab,$S(pFormat["t":$C(9),1:" "),1+$S(tN:tN,pFormat["t":1,1:4))="" }
		Else { Set tTab="" }
		Set tIncludeWhitespace = (tLF_tTab'="")

		If pFormat["o" || 'pLevel {
			Set tPropCount = ""
			If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write $S(pFormat["b":tLF_tIndent,1:" ")
			Write "{"
		} Else {
			Set tPropCount = 0
		}
		Set tProp="" For { Set tProp=$O(..%data(tProp),1,tValue)  Quit:""=tProp
			If $IsObject(tValue) {
				If tValue.%IsA("%ZENproxy.Object") {
					
					Set tValue.forceStringFormat	= ..forceStringFormat
					Set tValue.excludeStringformat	= ..excludeStringformat
					
					If pFormat["o" || tValue.hasJSONContent(pFormat) {
						Do nextProp
						Write $$$ZENJSONPROP(tProp,pFormat)_":"
						Set tSC = tValue.%ToJSON(pLevel+1,pFormat)
						Quit:$$$ISERR(tSC)
					}
				} ElseIf pFormat["o" || ##class(%ZEN.Auxiliary.jsonProvider).hasObjContent(tValue,.tVisited,pFormat) {
					Do nextProp
					Write $$$ZENJSONPROP(tProp,pFormat)_":"
					Set tSC = ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(tValue,.tVisited, pLevel+1, pFormat)
					Quit:$$$ISERR(tSC)
				}
			} ElseIf pFormat["e" || $L(tValue) {
				Do nextProp
				If (..forceStringFormat.Find(tProp)=1)
				{
					Write $$$ZENJSONPAIRSTRING(tProp,tValue,pFormat)
				}ElseIf ((pFormat["x") && (..excludeStringformat.Find(tProp)=""))
				{
					Write $$$ZENJSONPAIRSTRING(tProp,tValue,pFormat)
				}Else{
					Write $$$ZENJSONPAIR(tProp,tValue,pFormat)	
				}
			}
		}
		If tPropCount'=0 {
			#; either we wrote at least one property or we wrote an empty '{' due to "o" mode or level zero
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write tLF_tIndent
			Write "}"
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
		Write !,"/* Error in JSON output:",$System.Status.DisplayError(tSC),!,"*/",!
	}
	Quit tSC

nextProp
	If tPropCount=0 {
		If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Write $S(pFormat["b":tLF_tIndent,1:" ")
		Write "{"
	} ElseIf tPropCount {
		Write ","
	} ; else tPropCount="" means we already did the starting '{' due to "o" mode
	Set tPropCount = tPropCount + 1
	If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+2)="" Write tLF_tIndent
	Quit
]]></Implementation>
</Method>

<Method name="%Print">
<Description><![CDATA[
 Utility method.<br/>
 Print out contents of this proxy object to the current device.]]></Description>
<Internal>1</Internal>
<FormalSpec>pLevel:%Integer=0</FormalSpec>
<Implementation><![CDATA[
	Write ?(pLevel*4),"-----------------",!
	Set tProp = $O(..%data(""))
	While (tProp '= "") {
		Write ?(pLevel*4),tProp,": "
		Set tValue = $G(..%data(tProp))
		If $IsObject(tValue) {
			If tValue.%IsA("%ZENproxy.Object") {
				Do tValue.%Print(pLevel+1)
			}
			ElseIf (tValue.%IsA("%Collection.AbstractList")) {
				Write !
				For n=1:1:tValue.Count() {
					Write ?(pLevel+2),"[",n,"] "
					Set tItem = tValue.GetAt(n)
					If ($IsObject(tItem)&&tItem.%IsA("%ZENproxy.Object")) {
						Do tItem.%Print(pLevel+1)
					}
					Else {
						Write tItem,!
					}
				}
			}
			Else {
				Write "(",tValue,")"
			}
		}
		Else {
			Write $$$quote(tValue)
		}
		Write !
		Set tProp = $O(..%data(tProp))
	}
]]></Implementation>
</Method>

<Method name="Enumerate">
<Description>
Enumerate the contents of this proxy object, calling Client for each node</Description>
<Internal>1</Internal>
<FormalSpec>Client:%ZEN.proxyObjectEnumeratee,pLevel:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC,tPropCount,tProp,tValue,n,tItem,ex
	
	Set tSC = $$$OK
	Try {

		// tell client to start a new object
		Do Client.BeginNested()
		
		// for each property of the current object ..
		Set tPropCount = 0
		Set tProp = $O(..%data(""))
		While (tProp '= "") {
			
			// bump property count and tell client the property name
			Set tPropCount = tPropCount + 1
			Do Client.PropertyName(tProp)
			
			// the property value
			Set tValue = $G(..%data(tProp))
			
			If $IsObject(tValue) {
				
				// if it's a nested proxy object ..
				If tValue.%IsA("%ZENproxy.Object") {
					
					// recurse
					Set tSC = tValue.Enumerate(Client,pLevel+1) If $$$ISERR(tSC) Quit
				}
				
				// .. if it's a list ..
				ElseIf (tValue.%IsA("%Collection.AbstractList")) {
					
					// tell client to start a new list
					Do Client.BeginList()
					
					// for each list item ..
					For n=1:1:tValue.Count() {
						
						Set tItem = tValue.GetAt(n)
						If ($IsObject(tItem)) {
							
							// if it's a nested proxy object ..
							If (tItem.%IsA("%ZENproxy.Object")) {
								
								// recurse
								Set tSC = tItem.Enumerate(Client,pLevel+1) If $$$ISERR(tSC) Quit
							}
							Else {
								Do Client.CacheObject(tItem)
							}
						}
						Else {
							Do Client.Simple(tItem)
						}
					}
					
					// for each named property ..
					Set n=$Char(0) // I believe that this collates earlier than any other non-numeric key
					While 1 {
						
						Set n=tValue.Next(n) If n="" {Quit}
						Do Client.PropertyName(n)					
						Set tItem = tValue.GetAt(n)
						If ($IsObject(tItem)) {
							
							// if it's a nested proxy object ..
							If (tItem.%IsA("%ZENproxy.Object")) {
								
								// recurse
								Set tSC = tItem.Enumerate(Client,pLevel+1) If $$$ISERR(tSC) Quit
							}
							Else {
								Do Client.CacheObject(tItem)
							}
						}
						Else {
							Do Client.Simple(tItem)
						}
					}
					
					Do Client.EndList()
					If $$$ISERR(tSC) Quit
				}
				Else {
					Do Client.CacheObject(tValue)
				}
			}
			Else {
				Do Client.Simple(tValue)
			}
			Set tProp = $O(..%data(tProp))
		}
		Do Client.EndNested()
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="DeleteDocument">
<Description><![CDATA[
DeleteDocument will delete a document identified by ID from the specified global or local variable reference (GLVN)</var>. 
If a document with the specified ID does not exist in that GLVN then DeleteDocument will return an error in the returned %Status value. 
	<p>
<table border=1>
<th>
Parameters
</th>
<tr>
		<td>pWhere</td>
		<td>Input</td>
		<td>
				<p>Global or local variable reference. This is the location from where the proxyObject instance will be deleted.</p>
		</td>
</tr>
<tr>
		<td>pDocumentID</td>
		<td>Input</td>
		<td>
				<p>The document ID.</p>
		</td>
</tr>
</table>
</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		if $Data(@pWhere@(pDocumentID)) {
			kill @pWhere@(pDocumentID)
		}
		else {
			throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$DeleteObjectNotFound,pWhere,pDocumentID,pWhere))
		}
		set tStatus = $$$OK
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus
]]></Implementation>
</Method>

<Method name="DocumentExists">
<Description><![CDATA[
DocumentExists() returns a boolean value indicate whether or not the documentID exists in the global/local variable reference (GLVN). 
	<p>
<table border=1>
<th>
Parameters
</th>
<tr>
		<td>pWhere</td>
		<td>Input</td>
		<td>
				<p>Global or local variable reference where documents are stored.</p>
		</td>
</tr>
<tr>
		<td>pDocumentID</td>
		<td>Input</td>
		<td>
				<p>The document ID.</p>
		</td>
</tr>
</table>
</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string=""</FormalSpec>
<ReturnType>%ZEN.Datatype.boolean</ReturnType>
<Implementation><![CDATA[
	try {
		set tReturn = 0
		if $Data(@pWhere@(pDocumentID)) {
			set tReturn = 1
		}
	}
	catch tException {
		set tReturn = 0
	}
	quit tReturn
]]></Implementation>
</Method>

<Method name="OpenDocument">
<Description><![CDATA[
OpenDocument will retrieve a previously saved document from the specified global or local variable reference (GLVN) with the specified <var>pDocumentID</var> 
and return an oref referencing an instance of %ZENproxy.Object. 
If a document with the specified ID does not exist in that GLVN then OpenDocument will return an error in the output pStatus parameter.
	<p>
<table border=1>
<th>
Parameters
</th>
<tr>
		<td>pWhere</td>
		<td>Input</td>
		<td>
				<p>Global or local variable reference. This is the location where the proxyObject instance will be saved.</p>
		</td>
</tr>
<tr>
		<td>pDocumentID</td>
		<td>Input</td>
		<td>
				<p>The ID of the document to be opened.</p>
		</td>
<tr>
		<td>pStatus</td>
		<td>Output</td>
		<td>
				<p>The returned %Status value, indicating success or failure.</p>
		</td>
</tr>
</table>
</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string,*pStatus:%Status=""</FormalSpec>
<ReturnType>%ZENproxy.Object</ReturnType>
<Implementation><![CDATA[
	try {
		if $Data(@pWhere@(pDocumentID)) {
			set tObjectID = $Order(@pWhere@(pDocumentID,""),1,tType)
			if tObjectID '= "" {
				if tType = "" {
					set tMe = ..%New()
				}
				else {
					set tMe = ##class(%Library.ListOfDataTypes).%New()
				}
				set tOQ = 1, tOQPtr = 1
					// Initialize the Object Queue
					//	tOQ(ptr) is the object ID
					//	tOQ(ptr,0) is the current object's oref
					//	tOQ(ptr,1) is the containing object's oref
					//	tOQ(ptr,2) is the containing object's property
				set tOQ(1) = tObjectID, tOQ(1,0) = tMe, tOQ(1,1) = ""
				do {
					set tObjectID = tOQ(tOQPtr)
					set tObject = tOQ(tOQPtr,0)
						// tOREF is an index on objectID so that we can resolve object references from multiple properties/objects
					set tOREF(tObjectID) = tObject
					if $Isobject(tOQ(tOQPtr,1)) {
						if (tOQ(tOQPtr,1).%IsA("%ZENproxy.Object")) {
							set $property(tOQ(tOQPtr,1),tOQ(tOQPtr,2)) = tObject
						}
						else {
							do $method(tOQ(tOQPtr,1),"InsertAt",tObject,tOQ(tOQPtr,2))
						}
					}
						// If we stop supporting generic collection objects for dynamic lists then we can change this code.
					if (tObject.%IsA("%ZENproxy.Object")) {
						do ..loadObject(tObject,pWhere,pDocumentID,tObjectID,.tOQ,.tOREF)
					}
					else {
						do ..loadList(tObject,pWhere,pDocumentID,tObjectID,.tOQ,.tOREF)
					}

					set tOQPtr = $Order(tOQ(tOQPtr))
				} while tOQPtr
				set pStatus = $$$OK
			}
			else {
				set tMe = ..%New()
			}
		}
		else {
				// Document doesn't exist
			throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$LoadObjectNotFound,pWhere,pDocumentID))
		}
	}
	catch tException {
		set tMe = $$$NULLOREF
		set pStatus = tException.AsStatus()
	}
	quit tMe
]]></Implementation>
</Method>

<Method name="OpenEmbeddedDocument">
<Description><![CDATA[
OpenEmbeddedDocument will retrieve a document embedded in a previously saved document from the specified global or local variable reference (GLVN) with the specified <var>pDocumentID</var> 
and return an oref referencing an instance of %ZENproxy.Object. 
If a document with the specified documentID does not exist in that GLVN then OpenDocument will return an error in the output pStatus parameter. 
If an embedded document with the specified objectID does not exist in that GLVN then OpenDocument will return an error in the output pStatus parameter. 
	<p>
<table border=1>
<th>
Parameters
</th>
<tr>
		<td>pWhere</td>
		<td>Input</td>
		<td>
				<p>Global or local variable reference. This is the location where the proxyObject instance will be saved.</p>
		</td>
</tr>
<tr>
		<td>pDocumentID</td>
		<td>Input</td>
		<td>
				<p>The ID of the document containing the embedded document.</p>
		</td>
<tr>
<tr>
		<td>pObjectID</td>
		<td>Input</td>
		<td>
				<p>The objectID of the document embedded in the specified <var>pDocumentID</var>.</p>
		</td>
<tr>
		<td>pStatus</td>
		<td>Output</td>
		<td>
				<p>The returned %Status value, indicating success or failure.</p>
		</td>
</tr>
</table>
</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string,pObjectID:%ZEN.Datatype.string,*pStatus:%Status=""</FormalSpec>
<ReturnType>%ZENproxy.Object</ReturnType>
<Implementation><![CDATA[
	try {
		if $Data(@pWhere@(pDocumentID,pObjectID),tType) {
			if tType = "" {
				set tMe = ..%New()
			}
			else {
				set tMe = ##class(%Library.ListOfDataTypes).%New()
			}
			set tOQ = 1, tOQPtr = 1
				// Initialize the Object Queue
				//	tOQ(ptr) is the object ID
				//	tOQ(ptr,0) is the object Type - null or 'list'
				//	tOQ(ptr,1) is the containing object's oref
				//	tOQ(ptr,2) is the containing object's property
			set tOQ(1) = pObjectID, tOQ(1,0) = tMe, tOQ(1,1) = ""
			do {
				set tObjectID = tOQ(tOQPtr)
				set tObject = tOQ(tOQPtr,0)
					// tOREF is an index on objectID so that we can resolve object references from multiple properties/objects
				set tOREF(tObjectID) = tObject
				if $Isobject(tOQ(tOQPtr,1)) {
					if (tOQ(tOQPtr,1).%IsA("%ZENproxy.Object")) {
						set $property(tOQ(tOQPtr,1),tOQ(tOQPtr,2)) = tObject
					}
					else {
						do $method(tOQ(tOQPtr,1),"InsertAt",tObject,tOQ(tOQPtr,2))
					}
				}
					// If we stop supporting generic collection objects for dynamic lists then we can change this code.
				if (tObject.%IsA("%ZENproxy.Object")) {
					do ..loadObject(tObject,pWhere,pDocumentID,tObjectID,.tOQ,.tOREF)
				}
				else {
					do ..loadList(tObject,pWhere,pDocumentID,tObjectID,.tOQ,.tOREF)
				}
				set tOQPtr = $Order(tOQ(tOQPtr))
			} while tOQPtr
			set pStatus = $$$OK
		}
		else {
				// Document doesn't exist
			throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$LoadObjectNotFound,pWhere,pDocumentID))
		}
	}
	catch tException {
		set pStatus = tException.AsStatus()
	}
	quit tMe
]]></Implementation>
</Method>

<Method name="SaveDocument">
<Description><![CDATA[
SaveDocument will save the proxyObject to a global or local variable reference (GLVN) with the specified <var>pDocumentID</var>.
If a document with the same ID already exists in that GLVN then SaveDocument will return an error in the returned %Status value.
	<p>
<table border=1>
<th>
Parameters
</th>
<tr>
		<td>pWhere</td>
		<td>Input</td>
		<td>
				<p>Global or local variable reference. This is the location where the proxyObject instance will be saved.</p>
		</td>
</tr>
<tr>
		<td>pDocumentID</td>
		<td>Input</td>
		<td>
				<p>The document ID. This value must be unique within the GLVN specified in <var>pWhere</var>.</p>
		</td>
</tr>
</table>
</p>]]></Description>
<FormalSpec>pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define pdbEncodeLiteral(%value)			$select(%value="":"",'$f("@#",$e(%value)):%value,1:"/"_%value)
	// Internal Document reference
#define pdbEncodeReference(%value)			$select(%value'="":"@"_%value,1:"")
	// Reference to any Cache Object
#define pdbEncodeObject(%value)				$select(%value'="":"#"_%value,1:"")

	try {
		if pDocumentID = "" { set pDocumentID = .."_documentID" }
		if $Data(@pWhere@(pDocumentID)) {
			throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$IDKeyNotUnique,pWhere,pDocumentID,pWhere))
		}
			// Initialize the Object ID counter
		set tObjectID = 0
			// Initialize the Object Queue
		set tOQ = 1, tOQ(1) = $this, tOQ(1,1) = 0
			// and the Queue Ptr
		set tOQPtr = 1
			// Save the Document header
		set @pWhere@(pDocumentID) = $h
		do {
			set tObject = tOQ(tOQPtr)
			set tObjectID = tObjectID + 1
				// tOID is an index on +oref so that we can resolve object references from multiple properties/objects
			set tOID(+tObject) = tObjectID
			if tOQ(tOQPtr,1) {
					// Tell the outer object about me
					// Encode this value as an object
				set @pWhere@(pDocumentID,tOQ(tOQPtr,1),tOQ(tOQPtr,2)) = $$$pdbEncodeReference(tObjectID)
			}
			if tObject.%IsA("%ZENproxy.Object") {
				set tProperty = $Order(tObject.%data(""),1,tValue)
				if tProperty '= "" {
					do {
						if '$Isobject(tValue) {
								// Need to encode tProperty - % vs. _, delimited, etc. ??
							set @pWhere@(pDocumentID,tObjectID,tProperty) = $$$pdbEncodeLiteral(tValue)
						}
						elseif $Get(tOID(+tValue)) '= "" {
							set @pWhere@(pDocumentID,tObjectID,tProperty) = $$$pdbEncodeReference(tOID(+tValue))
						}
							// Queue the object so we can serialize it later
						elseif (tValue.%IsA("%ZENproxy.Object")) || (tValue.%IsA("%Collection.AbstractList")) {
							set tOQ = tOQ + 1
							set tOQ(tOQ) = tValue
							set tOQ(tOQ,1) = tObjectID
							set tOQ(tOQ,2) = tProperty
						}
						else {
			/// TODO: This is some other object - just serialize it and get its ID
						}
						set tProperty = $Order(tObject.%data(tProperty),1,tValue)
					} while tProperty '= ""
				}
				set @pWhere@(pDocumentID,tObjectID) = ""
			}
			elseif tObject.%IsA("%Collection.AbstractList") {
				set tElement = ""
				set tValue = tObject.GetNext(.tElement)
				if tElement '= "" {
					do {
						if '$Isobject(tValue) {
								// Need to encode tElement - % vs. _, delimited, etc. ??
			/// TODO Encode this as a literal
							set @pWhere@(pDocumentID,tObjectID,tElement) = $$$pdbEncodeLiteral(tValue)
						}
						elseif $Get(tOID(+tValue)) '= "" {
							set @pWhere@(pDocumentID,tObjectID,tElement) = $$$pdbEncodeReference(tOID(+tValue))
						}
							// Queue the object so we can serialize it later
						elseif tValue.%IsA("%ZENproxy.Object") {
								// This mechanism does not allow for one oref to be referenced from multiple locations
							set tOQ = tOQ + 1
							set tOQ(tOQ) = tValue
							set tOQ(tOQ,1) = tObjectID
							set tOQ(tOQ,2) = tElement
						}
						else {
			/// TODO: This is some other object - just serialize it and get its ID
						}
						set tValue = tObject.GetNext(.tElement)
					} while tElement '= ""
				}
				set @pWhere@(pDocumentID,tObjectID) = "list"
			}
			set tOQPtr = $Order(tOQ(tOQPtr))
		} while tOQPtr
		set tStatus = $$$OK
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus
]]></Implementation>
</Method>

<Method name="loadObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObject:%Library.RegisteredObject,pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string,pObjectID:%ZEN.Datatype.integer,&pOQ,&pOREF]]></FormalSpec>
<Implementation><![CDATA[
	set tProperty = $Order(@pWhere@(pDocumentID,pObjectID,""),1,tValue)
	if tProperty '= "" {
		do {
			if ('$Find("#@",$Extract(tValue))) || (tValue = "") {
				if '$Find("/@/#",$Extract(tValue,1,2)) {
					set $property(pObject,tProperty) = tValue
				}
				else {
					set $property(pObject,tProperty) = $Extract(tValue,2,*)
				}
			}
			elseif $Isobject($Get(pOREF($Extract(tValue,2,*)))) {
				set $property(pObject,tProperty) = pOREF(tValue)
			}
			else {
				set tValueType = $Extract(tValue)
				set tObjectID = $Extract(tValue,2,*)
				// Queue the object so we can load it later
				set tType = $Get(@pWhere@(pDocumentID,tObjectID))
				set pOQ = pOQ + 1
				set pOQ(pOQ) = tObjectID
				set pOQ(pOQ,0) = $Select(tType="":##class(%ZENproxy.Object).%New(),1:##class(%Library.ListOfDataTypes).%New())
				set pOQ(pOQ,1) = pObject
				set pOQ(pOQ,2) = tProperty
			}
			set tProperty = $Order(@pWhere@(pDocumentID,pObjectID,tProperty),1,tValue)
		} while tProperty '= ""
	}
]]></Implementation>
</Method>

<Method name="loadList">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObject:%Collection.AbstractList,pWhere:%ZEN.Datatype.string,pDocumentID:%ZEN.Datatype.string,pObjectID:%ZEN.Datatype.integer,&pOQ,&pOREF]]></FormalSpec>
<Implementation><![CDATA[
	set tProperty = $Order(@pWhere@(pDocumentID,pObjectID,""),1,tValue)
	if tProperty '= "" {
		do {
			if ('$Find("#@",$Extract(tValue))) || (tValue = "") {
				if '$Find("/@/#",$Extract(tValue,1,2)) {
					do pObject.InsertAt(tValue,tProperty)
				}
				else {
					do pObject.InsertAt($Extract(tValue,2,*),tProperty)
				}
			}
			elseif $Isobject($Get(pOREF($Extract(tValue,2,*)))) {
					do pObject.InsertAt($Extract(tValue,2,*),pOREF(tValue))
			}
			else {
				set tValueType = $Extract(tValue)
				set tObjectID = $Extract(tValue,2,*)
				// Queue the object so we can load it later
				set tType = $Get(@pWhere@(pDocumentID,tObjectID))
				set pOQ = pOQ + 1
				set pOQ(pOQ) = tObjectID
				set pOQ(pOQ,0) = $Select(tType="":##class(%ZENproxy.Object).%New(),1:##class(%Library.ListOfDataTypes).%New())
				set pOQ(pOQ,1) = pObject
				set pOQ(pOQ,2) = tProperty
			}
			set tProperty = $Order(@pWhere@(pDocumentID,pObjectID,tProperty),1,tValue)
		} while tProperty '= ""
	}
]]></Implementation>
</Method>
</Class>
</Export>
